// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pitchball.Infrastructure.Data;

namespace Pitchball.Migrations
{
    [DbContext(typeof(PitchContext))]
    [Migration("20200119152704_NewContact")]
    partial class NewContact
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<byte[]>("ImageContent");

                    b.Property<string>("ImageType");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PitchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lighting");

                    b.Property<string>("Name");

                    b.Property<string>("Street");

                    b.Property<string>("Surface");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("PitchId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2020, 1, 19, 15, 27, 4, 440, DateTimeKind.Utc), Email = "admin@callme.com", Login = "Admin", Name = "Jan", PasswordHash = new byte[] { 113, 0, 25, 210, 41, 68, 150, 204, 173, 203, 229, 180, 109, 128, 92, 120, 113, 254, 65, 55, 11, 74, 240, 238, 71, 61, 29, 215, 252, 128, 219, 30, 220, 63, 230, 228, 103, 245, 79, 253, 111, 41, 54, 238, 48, 231, 165, 213, 86, 66, 49, 215, 177, 111, 218, 19, 82, 38, 51, 169, 194, 56, 84, 173 }, Role = "Admin", Salt = new byte[] { 229, 117, 133, 158, 136, 201, 186, 121, 110, 67, 150, 147, 2, 187, 67, 166, 17, 73, 205, 212, 155, 189, 180, 210, 163, 178, 117, 211, 212, 68, 27, 191, 140, 48, 114, 231, 92, 63, 183, 126, 8, 26, 190, 80, 102, 58, 103, 98, 74, 251, 251, 74, 13, 110, 206, 1, 176, 234, 143, 130, 39, 79, 207, 133, 0, 23, 91, 3, 15, 128, 76, 109, 74, 238, 211, 90, 206, 127, 239, 127, 139, 25, 42, 144, 116, 248, 109, 9, 69, 131, 64, 51, 20, 254, 41, 151, 29, 105, 190, 163, 156, 144, 39, 76, 104, 89, 33, 240, 31, 11, 234, 65, 144, 48, 135, 201, 133, 9, 178, 52, 182, 209, 183, 159, 100, 253, 165, 223 }, Surname = "Nowak", UpdatedAt = new DateTime(2020, 1, 19, 15, 27, 4, 440, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("Captain");

                    b.HasDiscriminator().HasValue("Captain");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("AccountRef");

                    b.HasIndex("AccountRef")
                        .IsUnique()
                        .HasFilter("[AccountRef] IS NOT NULL");

                    b.ToTable("AccountImage");

                    b.HasDiscriminator().HasValue("AccountImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("PitchRef");

                    b.HasIndex("PitchRef")
                        .IsUnique()
                        .HasFilter("[PitchRef] IS NOT NULL");

                    b.ToTable("PitchImage");

                    b.HasDiscriminator().HasValue("PitchImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("TeamImage");

                    b.HasDiscriminator().HasValue("TeamImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Comments")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany()
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany("Reservations")
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Reservations")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("Captain")
                        .HasForeignKey("Pitchball.Domain.Models.Captain", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Account")
                        .WithOne("AccountImage")
                        .HasForeignKey("Pitchball.Domain.Models.AccountImage", "AccountRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithOne("PitchImage")
                        .HasForeignKey("Pitchball.Domain.Models.PitchImage", "PitchRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("TeamImage")
                        .HasForeignKey("Pitchball.Domain.Models.TeamImage", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
