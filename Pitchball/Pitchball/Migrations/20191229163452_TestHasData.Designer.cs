// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pitchball.Infrastructure.Data;

namespace Pitchball.Migrations
{
    [DbContext(typeof(PitchContext))]
    [Migration("20191229163452_TestHasData")]
    partial class TestHasData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<byte[]>("ImageContent");

                    b.Property<string>("ImageType");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PitchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lighting");

                    b.Property<string>("Name");

                    b.Property<string>("Street");

                    b.Property<string>("Surface");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("PitchId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2019, 12, 29, 16, 34, 52, 250, DateTimeKind.Utc), Email = "admin@callme.com", Login = "Admin", Name = "Jan", PasswordHash = new byte[] { 151, 247, 27, 71, 95, 23, 234, 7, 16, 73, 78, 98, 162, 169, 85, 114, 122, 43, 122, 191, 48, 38, 69, 30, 205, 123, 198, 89, 132, 198, 177, 68, 145, 30, 235, 161, 74, 2, 121, 130, 185, 174, 196, 22, 143, 251, 233, 105, 199, 21, 181, 46, 80, 149, 70, 76, 167, 129, 43, 184, 6, 181, 61, 198 }, Role = "Admin", Salt = new byte[] { 36, 27, 137, 21, 177, 245, 191, 140, 118, 84, 66, 4, 49, 59, 159, 72, 4, 204, 47, 172, 155, 233, 115, 232, 210, 20, 139, 174, 110, 45, 215, 11, 80, 237, 215, 32, 20, 144, 6, 209, 90, 173, 196, 129, 15, 112, 179, 145, 232, 88, 195, 199, 255, 70, 13, 84, 85, 222, 201, 123, 205, 157, 107, 55, 63, 59, 220, 18, 101, 52, 43, 102, 143, 23, 162, 248, 229, 166, 173, 14, 152, 100, 50, 155, 0, 116, 170, 73, 23, 84, 63, 45, 199, 111, 6, 168, 134, 245, 181, 24, 22, 4, 170, 166, 94, 130, 86, 14, 215, 179, 37, 80, 180, 233, 183, 238, 8, 198, 47, 71, 164, 218, 220, 71, 194, 144, 20, 89 }, Surname = "Nowak", UpdatedAt = new DateTime(2019, 12, 29, 16, 34, 52, 250, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("Captain");

                    b.HasDiscriminator().HasValue("Captain");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("AccountRef");

                    b.HasIndex("AccountRef")
                        .IsUnique()
                        .HasFilter("[AccountRef] IS NOT NULL");

                    b.ToTable("AccountImage");

                    b.HasDiscriminator().HasValue("AccountImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("PitchRef");

                    b.HasIndex("PitchRef")
                        .IsUnique()
                        .HasFilter("[PitchRef] IS NOT NULL");

                    b.ToTable("PitchImage");

                    b.HasDiscriminator().HasValue("PitchImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("TeamImage");

                    b.HasDiscriminator().HasValue("TeamImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Comments")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany("Reservations")
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Reservations")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("Captain")
                        .HasForeignKey("Pitchball.Domain.Models.Captain", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Account")
                        .WithOne("AccountImage")
                        .HasForeignKey("Pitchball.Domain.Models.AccountImage", "AccountRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithOne("PitchImage")
                        .HasForeignKey("Pitchball.Domain.Models.PitchImage", "PitchRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("TeamImage")
                        .HasForeignKey("Pitchball.Domain.Models.TeamImage", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
