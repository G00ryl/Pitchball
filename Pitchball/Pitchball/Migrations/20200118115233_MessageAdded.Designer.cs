// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pitchball.Infrastructure.Data;

namespace Pitchball.Migrations
{
    [DbContext(typeof(PitchContext))]
    [Migration("20200118115233_MessageAdded")]
    partial class MessageAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<byte[]>("ImageContent");

                    b.Property<string>("ImageType");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PitchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lighting");

                    b.Property<string>("Name");

                    b.Property<string>("Street");

                    b.Property<string>("Surface");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("PitchId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2020, 1, 18, 11, 52, 32, 961, DateTimeKind.Utc), Email = "admin@callme.com", Login = "Admin", Name = "Jan", PasswordHash = new byte[] { 162, 148, 202, 124, 39, 14, 199, 54, 192, 55, 191, 179, 212, 42, 220, 55, 151, 43, 180, 49, 168, 57, 111, 238, 63, 38, 53, 81, 184, 128, 39, 160, 238, 164, 230, 167, 253, 125, 70, 27, 157, 82, 157, 7, 211, 154, 50, 190, 145, 9, 11, 140, 166, 248, 191, 205, 51, 131, 153, 48, 96, 216, 176, 99 }, Role = "Admin", Salt = new byte[] { 251, 138, 124, 124, 244, 17, 54, 164, 167, 177, 184, 93, 165, 111, 96, 135, 73, 133, 165, 175, 126, 62, 41, 163, 59, 117, 243, 17, 29, 223, 162, 153, 172, 212, 54, 54, 31, 172, 192, 23, 217, 157, 239, 170, 140, 35, 55, 153, 187, 157, 10, 133, 126, 166, 10, 126, 56, 244, 203, 31, 59, 26, 189, 106, 126, 38, 54, 166, 9, 24, 143, 207, 193, 183, 77, 27, 33, 165, 241, 97, 19, 165, 100, 218, 200, 188, 147, 31, 72, 114, 27, 65, 197, 30, 211, 250, 248, 228, 66, 151, 87, 238, 32, 215, 11, 248, 125, 101, 172, 95, 75, 85, 3, 165, 146, 84, 38, 107, 9, 32, 17, 54, 44, 254, 237, 223, 55, 85 }, Surname = "Nowak", UpdatedAt = new DateTime(2020, 1, 18, 11, 52, 32, 961, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("Captain");

                    b.HasDiscriminator().HasValue("Captain");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("AccountRef");

                    b.HasIndex("AccountRef")
                        .IsUnique()
                        .HasFilter("[AccountRef] IS NOT NULL");

                    b.ToTable("AccountImage");

                    b.HasDiscriminator().HasValue("AccountImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("PitchRef");

                    b.HasIndex("PitchRef")
                        .IsUnique()
                        .HasFilter("[PitchRef] IS NOT NULL");

                    b.ToTable("PitchImage");

                    b.HasDiscriminator().HasValue("PitchImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("TeamImage");

                    b.HasDiscriminator().HasValue("TeamImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Comments")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany()
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany("Reservations")
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Reservations")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("Captain")
                        .HasForeignKey("Pitchball.Domain.Models.Captain", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Account")
                        .WithOne("AccountImage")
                        .HasForeignKey("Pitchball.Domain.Models.AccountImage", "AccountRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithOne("PitchImage")
                        .HasForeignKey("Pitchball.Domain.Models.PitchImage", "PitchRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("TeamImage")
                        .HasForeignKey("Pitchball.Domain.Models.TeamImage", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
