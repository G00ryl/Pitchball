// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pitchball.Infrastructure.Data;

namespace Pitchball.Migrations
{
    [DbContext(typeof(PitchContext))]
    [Migration("20200120004056_funny")]
    partial class funny
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<byte[]>("ImageContent");

                    b.Property<string>("ImageType");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PitchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lighting");

                    b.Property<string>("Name");

                    b.Property<string>("Street");

                    b.Property<string>("Surface");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("PitchId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new { Id = 1, CreatedAt = new DateTime(2020, 1, 20, 0, 40, 55, 656, DateTimeKind.Utc), Email = "admin@callme.com", Login = "Admin", Name = "Jan", PasswordHash = new byte[] { 132, 77, 254, 252, 40, 15, 138, 212, 132, 61, 103, 167, 126, 100, 217, 210, 171, 222, 168, 250, 140, 165, 106, 131, 4, 236, 179, 164, 154, 197, 86, 124, 53, 163, 250, 156, 75, 252, 198, 71, 207, 237, 221, 240, 71, 23, 225, 47, 45, 112, 225, 142, 59, 45, 16, 53, 229, 63, 97, 187, 3, 192, 226, 14 }, Role = "Admin", Salt = new byte[] { 234, 106, 77, 7, 47, 200, 100, 168, 169, 52, 74, 241, 12, 143, 198, 147, 193, 158, 133, 237, 18, 56, 208, 52, 224, 226, 142, 68, 191, 157, 165, 46, 200, 94, 49, 130, 188, 50, 92, 160, 161, 191, 75, 121, 94, 254, 130, 43, 29, 176, 99, 185, 139, 30, 7, 14, 176, 57, 53, 53, 236, 183, 17, 180, 71, 38, 78, 147, 73, 22, 7, 171, 211, 208, 67, 87, 57, 36, 130, 214, 0, 52, 191, 174, 28, 47, 242, 240, 73, 28, 216, 169, 129, 181, 187, 149, 152, 34, 123, 114, 93, 191, 95, 46, 211, 116, 88, 143, 202, 95, 159, 144, 28, 170, 93, 57, 206, 58, 63, 217, 14, 45, 181, 12, 62, 244, 88, 133 }, Surname = "Nowak", UpdatedAt = new DateTime(2020, 1, 20, 0, 40, 55, 656, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("Captain");

                    b.HasDiscriminator().HasValue("Captain");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("AccountRef");

                    b.HasIndex("AccountRef")
                        .IsUnique()
                        .HasFilter("[AccountRef] IS NOT NULL");

                    b.ToTable("AccountImage");

                    b.HasDiscriminator().HasValue("AccountImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("PitchRef");

                    b.HasIndex("PitchRef")
                        .IsUnique()
                        .HasFilter("[PitchRef] IS NOT NULL");

                    b.ToTable("PitchImage");

                    b.HasDiscriminator().HasValue("PitchImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("TeamImage");

                    b.HasDiscriminator().HasValue("TeamImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Comments")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Message", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Messages")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany("Reservations")
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Reservations")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("Captain")
                        .HasForeignKey("Pitchball.Domain.Models.Captain", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Account")
                        .WithOne("AccountImage")
                        .HasForeignKey("Pitchball.Domain.Models.AccountImage", "AccountRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithOne("PitchImage")
                        .HasForeignKey("Pitchball.Domain.Models.PitchImage", "PitchRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("TeamImage")
                        .HasForeignKey("Pitchball.Domain.Models.TeamImage", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
