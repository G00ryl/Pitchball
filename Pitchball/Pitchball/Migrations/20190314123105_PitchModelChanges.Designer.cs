// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pitchball.Infrastructure.Data;

namespace Pitchball.Migrations
{
    [DbContext(typeof(PitchContext))]
    [Migration("20190314123105_PitchModelChanges")]
    partial class PitchModelChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<string>("Role");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Base.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageContent");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatorId");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PitchId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Pitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lighting");

                    b.Property<string>("Name");

                    b.Property<string>("Surface");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Pitches");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaptainId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int?>("PitchId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CaptainId");

                    b.HasIndex("PitchId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Admin", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");


                    b.ToTable("Admin");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("Captain");

                    b.HasDiscriminator().HasValue("Captain");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Account");

                    b.Property<int?>("TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("AccountRef");

                    b.HasIndex("AccountRef")
                        .IsUnique()
                        .HasFilter("[AccountRef] IS NOT NULL");

                    b.ToTable("AccountImage");

                    b.HasDiscriminator().HasValue("AccountImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("PitchRef");

                    b.HasIndex("PitchRef")
                        .IsUnique()
                        .HasFilter("[PitchRef] IS NOT NULL");

                    b.ToTable("PitchImage");

                    b.HasDiscriminator().HasValue("PitchImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasBaseType("Pitchball.Domain.Models.Base.Image");

                    b.Property<int?>("TeamRef");

                    b.HasIndex("TeamRef")
                        .IsUnique()
                        .HasFilter("[TeamRef] IS NOT NULL");

                    b.ToTable("TeamImage");

                    b.HasDiscriminator().HasValue("TeamImage");
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Comment", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Comments")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Reservation", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Captain", "Captain")
                        .WithMany("Reservations")
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithMany("Reservations")
                        .HasForeignKey("PitchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.Captain", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("Captain")
                        .HasForeignKey("Pitchball.Domain.Models.Captain", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.User", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.AccountImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Base.Account", "Account")
                        .WithOne("AccountImage")
                        .HasForeignKey("Pitchball.Domain.Models.AccountImage", "AccountRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.PitchImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Pitch", "Pitch")
                        .WithOne("PitchImage")
                        .HasForeignKey("Pitchball.Domain.Models.PitchImage", "PitchRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Pitchball.Domain.Models.TeamImage", b =>
                {
                    b.HasOne("Pitchball.Domain.Models.Team", "Team")
                        .WithOne("TeamImage")
                        .HasForeignKey("Pitchball.Domain.Models.TeamImage", "TeamRef")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
